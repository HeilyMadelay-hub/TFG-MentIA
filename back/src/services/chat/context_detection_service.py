"""
Servicio para detectar contexto y preguntas fuera de tema
"""
import re
import logging
from typing import Tuple, Dict, List, Optional
import unicodedata

logger = logging.getLogger(__name__)

class ContextDetectionService:
    """Servicio para detectar el contexto de las preguntas y manejar consultas fuera de tema"""
    
    def __init__(self):
        # Frases comunes fuera de contexto y sus respuestas
        self.out_of_context_responses = {
            "saludos": {
                "patterns": ["hola", "buenos d√≠as", "buenas tardes", "buenas noches", "hey", "saludos", "qu√© tal"],
                "response": "¬°Hola! Soy MentIA, tu asistente para documentos. Puedo ayudarte a buscar informaci√≥n en tus documentos, hacer res√∫menes o responder preguntas sobre ellos. ¬øEn qu√© puedo ayudarte hoy?"
            },
            "despedidas": {
                "patterns": ["adi√≥s", "adios", "chao", "hasta luego", "bye", "nos vemos"],
                "response": "¬°Hasta luego! Ha sido un placer ayudarte. Recuerda que estar√© aqu√≠ cuando necesites consultar tus documentos. ¬°Que tengas un excelente d√≠a!"
            },
            "agradecimientos": {
                "patterns": ["gracias", "muchas gracias", "te agradezco", "thanks", "ty"],
                "response": "¬°De nada! Me alegra haberte sido de ayuda. Si tienes m√°s preguntas sobre tus documentos, no dudes en consultarme."
            },
            "estado": {
                "patterns": ["c√≥mo est√°s", "como estas", "qu√© tal est√°s", "c√≥mo te encuentras"],
                "response": "¬°Excelente! Estoy aqu√≠ para ayudarte con tus documentos. Puedo buscar informaci√≥n, hacer res√∫menes, analizar contenido y responder cualquier pregunta que tengas sobre los archivos que has subido."
            },
            "identidad": {
                "patterns": ["qui√©n eres", "quien eres", "qu√© eres", "que eres", "tu nombre", "c√≥mo te llamas"],
                "response": "Soy MentIA, tu asistente inteligente de DocuMente. Mi funci√≥n es ayudarte a gestionar y comprender mejor tus documentos. Puedo analizar PDFs y archivos de texto, hacer res√∫menes, buscar informaci√≥n espec√≠fica y responder preguntas sobre el contenido de tus documentos."
            },
            "capacidades": {
                "patterns": ["qu√© puedes hacer", "que puedes hacer", "qu√© sabes hacer", "para qu√© sirves", "ayuda", "help"],
                "response": "Puedo ayudarte con:\n\nüìÑ **An√°lisis de documentos**: Leo y comprendo el contenido de tus PDFs y archivos de texto\n\nüîç **B√∫squeda de informaci√≥n**: Encuentro datos espec√≠ficos dentro de tus documentos\n\nüìù **Res√∫menes**: Creo res√∫menes concisos de documentos largos\n\n‚ùì **Responder preguntas**: Contesto preguntas bas√°ndome en el contenido de tus archivos\n\nüìä **An√°lisis**: Extraigo informaci√≥n clave y patrones de tus documentos\n\n¬øQu√© te gustar√≠a hacer?"
            },
            "insultos": {
                "patterns": ["eres tonto", "eres est√∫pido", "eres idiota", "eres malo", "no sirves"],
                "response": "Entiendo que puedas estar frustrado. Mi objetivo es ayudarte de la mejor manera posible con tus documentos. Si algo no est√° funcionando como esperas, por favor dime c√≥mo puedo mejorar mi asistencia."
            },
            "clima": {
                "patterns": ["qu√© tiempo hace", "como esta el clima", "va a llover", "hace fr√≠o", "hace calor"],
                "response": "No tengo acceso a informaci√≥n meteorol√≥gica, pero puedo ayudarte con tus documentos. Si tienes alg√∫n documento sobre meteorolog√≠a o clima, puedo analizarlo para ti."
            },
            "deportes": {
                "patterns": ["f√∫tbol", "futbol", "barcelona", "real madrid", "messi", "cristiano"],
                "response": "Veo que te interesa el deporte. Aunque no puedo darte resultados deportivos actuales, si tienes documentos relacionados con deportes, puedo analizarlos y extraer informaci√≥n relevante para ti."
            },
            "comida": {
                "patterns": ["tengo hambre", "qu√© comer", "receta", "cocinar", "restaurante"],
                "response": "¬°La comida es importante! Aunque no puedo recomendarte restaurantes, si tienes documentos con recetas o informaci√≥n nutricional, puedo ayudarte a analizarlos y extraer la informaci√≥n que necesites."
            },
            "bromas": {
                "patterns": ["cu√©ntame un chiste", "cuentame un chiste", "dime algo gracioso", "hazme re√≠r"],
                "response": "¬°Me encantar√≠a contarte un chiste sobre documentos! ¬øPor qu√© el PDF fue al psic√≥logo? Porque ten√≠a problemas de formato... üòÑ Pero hablando en serio, ¬øhay algo en lo que pueda ayudarte con tus documentos?"
            },
            "matematicas": {
                "patterns": ["cu√°nto es", "cuanto es", "suma", "resta", "multiplica", "divide", "calcula"],
                "response": "Puedo hacer c√°lculos b√°sicos, pero mi especialidad es el an√°lisis de documentos. Si tienes documentos con datos num√©ricos, tablas o estad√≠sticas, puedo ayudarte a interpretarlos y analizarlos."
            }
        }
        
        # Palabras clave relacionadas con documentos
        self.document_keywords = [
            "documento", "archivo", "pdf", "txt", "texto",
            "resume", "resumir", "resumen", "busca", "buscar", 
            "encuentra", "analiza", "analizar", "informaci√≥n",
            "tramite", "tr√°mite", "contenido", "dice", "explica",
            "habla", "trata", "menciona", "contiene", "sobre"
        ]
    
    def detect_out_of_context(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        Detecta si la pregunta est√° fuera del contexto de documentos.
        
        Args:
            text: Texto a analizar
            
        Returns:
            Tuple[bool, Optional[str]]: (es_fuera_de_contexto, tipo_de_pregunta)
        """
        try:
            text_lower = text.lower().strip()
            text_no_accents = self.remove_accents(text_lower)
            
            # Verificar cada categor√≠a
            for category, data in self.out_of_context_responses.items():
                for pattern in data["patterns"]:
                    pattern_no_accents = self.remove_accents(pattern.lower())
                    
                    # Buscar coincidencia exacta o parcial
                    if pattern_no_accents in text_no_accents or text_no_accents in pattern_no_accents:
                        return True, category
                    
                    # Buscar palabras clave
                    pattern_words = pattern_no_accents.split()
                    text_words = text_no_accents.split()
                    if any(pw in text_words for pw in pattern_words if len(pw) > 3):
                        return True, category
            
            return False, None
            
        except Exception as e:
            logger.error(f"Error detectando contexto: {str(e)}")
            return False, None
    
    def get_context_specific_response(self, category: str, original_text: str) -> str:
        """
        Obtiene una respuesta espec√≠fica para preguntas fuera de contexto.
        
        Args:
            category: Categor√≠a detectada
            original_text: Texto original de la pregunta
            
        Returns:
            str: Respuesta personalizada
        """
        try:
            base_response = self.out_of_context_responses.get(category, {}).get("response", "")
            
            # Personalizar respuesta seg√∫n el contexto
            if category == "matematicas" and any(word in original_text.lower() for word in ["suma", "resta", "calcula"]):
                return self._handle_math_question(original_text, base_response)
            
            return base_response
            
        except Exception as e:
            logger.error(f"Error generando respuesta contextual: {str(e)}")
            return "Lo siento, no pude procesar tu pregunta correctamente."
    
    def _handle_math_question(self, text: str, base_response: str) -> str:
        """
        Maneja preguntas matem√°ticas b√°sicas.
        
        Args:
            text: Texto con la pregunta matem√°tica
            base_response: Respuesta base para matem√°ticas
            
        Returns:
            str: Respuesta personalizada con el c√°lculo
        """
        # Extraer n√∫meros de la pregunta
        numbers = re.findall(r'\d+', text)
        if len(numbers) >= 2:
            try:
                num1, num2 = int(numbers[0]), int(numbers[1])
                
                if "suma" in text.lower() or "+" in text:
                    result = num1 + num2
                    return f"La suma de {num1} + {num2} es {result}. Aunque mi especialidad es analizar documentos, puedo hacer c√°lculos b√°sicos. Si tienes documentos con datos num√©ricos, puedo ayudarte a analizarlos m√°s profundamente."
                    
                elif "resta" in text.lower() or "-" in text:
                    result = num1 - num2
                    return f"La resta de {num1} - {num2} es {result}. Recuerda que tambi√©n puedo analizar documentos con tablas num√©ricas y estad√≠sticas."
                    
                elif "multiplica" in text.lower() or "*" in text or "x" in text:
                    result = num1 * num2
                    return f"La multiplicaci√≥n de {num1} √ó {num2} es {result}. Si tienes documentos con c√°lculos o datos financieros, puedo ayudarte a interpretarlos."
                    
                elif "divide" in text.lower() or "/" in text:
                    if num2 != 0:
                        result = num1 / num2
                        return f"La divisi√≥n de {num1} √∑ {num2} es {result:.2f}. Tambi√©n puedo analizar documentos con datos estad√≠sticos y proporciones."
            except:
                pass
        
        return base_response
    
    def is_document_related(self, text: str) -> bool:
        """
        Determina si una pregunta est√° relacionada con documentos.
        
        Args:
            text: Texto a analizar
            
        Returns:
            bool: True si est√° relacionada con documentos
        """
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.document_keywords)
    
    def remove_accents(self, text: str) -> str:
        """
        Elimina los acentos del texto para comparaciones.
        
        Args:
            text: Texto con posibles acentos
            
        Returns:
            str: Texto sin acentos
        """
        return ''.join(
            c for c in unicodedata.normalize('NFD', text)
            if unicodedata.category(c) != 'Mn'
        )
    
    def classify_intent(self, text: str) -> str:
        """
        Clasifica la intenci√≥n del usuario bas√°ndose en el texto.
        
        Args:
            text: Texto a clasificar
            
        Returns:
            str: Tipo de intenci√≥n detectada
        """
        text_lower = text.lower()
        
        # Detectar intenciones espec√≠ficas
        if any(word in text_lower for word in ["buscar", "encontrar", "d√≥nde", "donde"]):
            return "search"
        elif any(word in text_lower for word in ["resumir", "resumen", "resume"]):
            return "summarize"
        elif any(word in text_lower for word in ["analizar", "an√°lisis", "analiza"]):
            return "analyze"
        elif any(word in text_lower for word in ["qu√© es", "que es", "definir", "explicar"]):
            return "explain"
        elif any(word in text_lower for word in ["listar", "mostrar", "cu√°les", "cuales"]):
            return "list"
        else:
            return "general"
