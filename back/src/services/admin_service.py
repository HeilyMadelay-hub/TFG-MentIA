"""
Servicio de l√≥gica de negocio para operaciones administrativas
Centraliza las operaciones complejas de administraci√≥n
"""
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from src.models.domain import User, Document, Chat
from src.services.document_service import DocumentService
from src.services.chat_service import ChatService
from src.services.user_service import UserService
from src.core.exceptions import DatabaseException

logger = logging.getLogger(__name__)

class AdminService:
    """Servicio para operaciones administrativas"""
    
    def __init__(
        self,
        document_service: DocumentService,
        chat_service: ChatService,
        user_service: UserService
    ):
        self.document_service = document_service
        self.chat_service = chat_service
        self.user_service = user_service
    
    # ==================== ESTAD√çSTICAS GENERALES ====================
    
    def get_system_overview(self) -> Dict[str, Any]:
        """
        Obtiene una vista general del sistema
        
        Returns:
            Dict con estad√≠sticas generales del sistema
        """
        try:
            overview = {
                "timestamp": datetime.utcnow(),
                "totals": {
                    "users": self.user_service.count_all_users(),
                    "documents": self.document_service.count_all_documents(),
                    "chats": self.chat_service.count_all_chats()
                },
                "active_last_24h": self._get_activity_stats(hours=24),
                "active_last_7d": self._get_activity_stats(days=7),
                "system_health": self._get_system_health()
            }
            
            logger.info("üìä Vista general del sistema generada")
            return overview
            
        except Exception as e:
            logger.error(f"Error generando vista general: {str(e)}")
            raise DatabaseException(f"Error al obtener estad√≠sticas: {str(e)}")
    
    def get_detailed_statistics(
        self,
        resource_type: str,
        time_period: str = "all",
        group_by: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Obtiene estad√≠sticas detalladas de un tipo de recurso
        
        Args:
            resource_type: Tipo de recurso (users, documents, chats)
            time_period: Per√≠odo de tiempo
            group_by: Campo por el cual agrupar
            
        Returns:
            Dict con estad√≠sticas detalladas
        """
        try:
            stats = {
                "resource_type": resource_type,
                "time_period": time_period,
                "timestamp": datetime.utcnow()
            }
            
            if resource_type == "documents":
                stats.update(self._get_document_statistics(time_period, group_by))
            elif resource_type == "chats":
                stats.update(self._get_chat_statistics(time_period, group_by))
            elif resource_type == "users":
                stats.update(self._get_user_statistics(time_period, group_by))
            else:
                raise ValueError(f"Tipo de recurso no soportado: {resource_type}")
            
            logger.info(f"üìä Estad√≠sticas detalladas generadas para {resource_type}")
            return stats
            
        except Exception as e:
            logger.error(f"Error generando estad√≠sticas detalladas: {str(e)}")
            raise DatabaseException(f"Error al obtener estad√≠sticas: {str(e)}")
    
    # ==================== OPERACIONES DE RECURSOS ====================
    
    def get_all_resources(
        self,
        resource_type: str,
        skip: int = 0,
        limit: int = 100,
        sort_by: str = 'created_at',
        order: str = 'desc',
        filters: Optional[Dict[str, Any]] = None
    ) -> List[Any]:
        """
        Obtiene todos los recursos de un tipo con filtros opcionales
        
        Args:
            resource_type: Tipo de recurso
            skip: Registros a saltar
            limit: L√≠mite de registros
            sort_by: Campo de ordenamiento
            order: Direcci√≥n del orden
            filters: Filtros adicionales
            
        Returns:
            Lista de recursos
        """
        try:
            if resource_type == "documents":
                return self.document_service.list_all_documents(
                    skip=skip, limit=limit, sort_by=sort_by, order=order
                )
            elif resource_type == "chats":
                return self.chat_service.get_all_chats(
                    skip=skip, limit=limit, sort_by=sort_by, order=order
                )
            elif resource_type == "users":
                return self.user_service.get_all_users(
                    skip=skip, limit=limit
                )
            else:
                raise ValueError(f"Tipo de recurso no soportado: {resource_type}")
                
        except Exception as e:
            logger.error(f"Error obteniendo recursos {resource_type}: {str(e)}")
            raise DatabaseException(f"Error al obtener {resource_type}: {str(e)}")
    
    def search_resources(
        self,
        resource_type: str,
        query: str,
        filters: Optional[Dict[str, Any]] = None,
        limit: int = 50
    ) -> List[Dict[str, Any]]:
        """
        Busca recursos por texto
        
        Args:
            resource_type: Tipo de recurso
            query: Texto de b√∫squeda
            filters: Filtros adicionales
            limit: L√≠mite de resultados
            
        Returns:
            Lista de recursos encontrados
        """
        try:
            results = []
            
            if resource_type == "documents":
                # B√∫squeda en t√≠tulo y contenido
                results = self.document_service.search_all_documents(
                    query=query, n_results=limit
                )
            elif resource_type == "users":
                # B√∫squeda en username y email
                results = self.user_service.search_users(
                    query=query, limit=limit
                )
            elif resource_type == "chats":
                # B√∫squeda en t√≠tulos de chat
                results = self.chat_service.search_chats(
                    query=query, limit=limit
                )
            
            logger.info(f"üîç B√∫squeda en {resource_type}: '{query}' - {len(results)} resultados")
            return results
            
        except Exception as e:
            logger.error(f"Error en b√∫squeda: {str(e)}")
            raise DatabaseException(f"Error al buscar: {str(e)}")
    
    # ==================== OPERACIONES EN LOTE ====================
    
    def bulk_delete_resources(
        self,
        resource_type: str,
        resource_ids: List[int],
        performed_by: User
    ) -> Dict[str, Any]:
        """
        Elimina m√∫ltiples recursos
        
        Args:
            resource_type: Tipo de recurso
            resource_ids: Lista de IDs a eliminar
            performed_by: Usuario que realiza la operaci√≥n
            
        Returns:
            Dict con resultado de la operaci√≥n
        """
        try:
            success_count = 0
            failed_ids = []
            
            for resource_id in resource_ids:
                try:
                    if resource_type == "documents":
                        success = self.document_service.delete_document(
                            resource_id, performed_by.id
                        )
                    elif resource_type == "chats":
                        success = self.chat_service.delete_chat(
                            resource_id, performed_by.id
                        )
                    elif resource_type == "users":
                        success = self.user_service.delete_user(
                            resource_id, performed_by.id
                        )
                    else:
                        success = False
                    
                    if success:
                        success_count += 1
                    else:
                        failed_ids.append(resource_id)
                        
                except Exception as e:
                    logger.error(f"Error eliminando {resource_type} {resource_id}: {str(e)}")
                    failed_ids.append(resource_id)
            
            result = {
                "operation": "bulk_delete",
                "resource_type": resource_type,
                "total": len(resource_ids),
                "success": success_count,
                "failed": len(failed_ids),
                "failed_ids": failed_ids,
                "performed_by": performed_by.username,
                "timestamp": datetime.utcnow()
            }
            
            logger.info(
                f"üóëÔ∏è Eliminaci√≥n en lote: {success_count}/{len(resource_ids)} "
                f"{resource_type} eliminados por {performed_by.username}"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Error en eliminaci√≥n en lote: {str(e)}")
            raise DatabaseException(f"Error al eliminar recursos: {str(e)}")
    
    def export_resources(
        self,
        resource_type: str,
        format: str = "json",
        filters: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Exporta recursos en el formato especificado
        
        Args:
            resource_type: Tipo de recurso
            format: Formato de exportaci√≥n (json, csv)
            filters: Filtros a aplicar
            
        Returns:
            Dict con informaci√≥n de la exportaci√≥n
        """
        try:
            # TODO: Implementar exportaci√≥n real
            # Por ahora, retorna metadata de la exportaci√≥n
            
            export_info = {
                "resource_type": resource_type,
                "format": format,
                "filters": filters or {},
                "status": "pending",
                "message": "Exportaci√≥n programada. Se notificar√° cuando est√© lista.",
                "timestamp": datetime.utcnow()
            }
            
            logger.info(f"üì§ Exportaci√≥n solicitada: {resource_type} en formato {format}")
            return export_info
            
        except Exception as e:
            logger.error(f"Error en exportaci√≥n: {str(e)}")
            raise DatabaseException(f"Error al exportar recursos: {str(e)}")
    
    # ==================== M√âTODOS ESPECIALIZADOS PARA DOCUMENTOS ====================
    
    def get_all_documents_with_filters(
        self,
        skip: int = 0,
        limit: int = 100,
        sort_by: str = "created_at",
        order: str = "desc",
        user_filter: Optional[int] = None,
        content_type_filter: Optional[str] = None
    ) -> List[Any]:
        """
        Obtiene todos los documentos del sistema con filtros avanzados.
        Solo para administradores.
        """
        try:
            # Usar el m√©todo existente con filtros b√°sicos
            documents = self.document_service.list_all_documents(
                skip=skip,
                limit=limit,
                sort_by=sort_by,
                order=order
            )
            
            # Aplicar filtros adicionales si se especifican
            if user_filter is not None:
                documents = [doc for doc in documents if doc.uploaded_by == user_filter]
            
            if content_type_filter:
                documents = [doc for doc in documents if doc.content_type == content_type_filter]
            
            return documents
        except Exception as e:
            logger.error(f"Error obteniendo documentos con filtros: {e}")
            raise DatabaseException(f"Error al obtener documentos: {str(e)}")
    
    def get_system_document_statistics(self, time_period: str = "all") -> Dict[str, Any]:
        """
        Genera estad√≠sticas completas de documentos del sistema.
        Incluye distribuci√≥n por usuarios, tipos y m√©tricas de almacenamiento.
        """
        try:
            stats = {
                "total_count": self.document_service.count_all_documents(),
                "by_user": self.document_service.get_documents_count_by_user(),
                "by_type": self.document_service.get_documents_count_by_type(),
                "storage": {
                    "total_size_mb": 0,  # TODO: Implementar en document_service
                    "average_size_mb": 0,
                    "largest_document_mb": 0
                },
                "time_period": time_period
            }
            
            if time_period != "all":
                # TODO: Implementar estad√≠sticas basadas en tiempo
                stats["time_based"] = {
                    "message": f"Estad√≠sticas por {time_period} en desarrollo"
                }
            
            return stats
        except Exception as e:
            logger.error(f"Error generando estad√≠sticas de documentos: {e}")
            raise DatabaseException(f"Error al generar estad√≠sticas: {str(e)}")
    
    def delete_document_as_admin(
        self,
        document_id: int,
        admin_user_id: int,
        force: bool = False
    ) -> bool:
        """
        Elimina un documento con permisos de administrador.
        Puede eliminar documentos de cualquier usuario.
        """
        try:
            # Log de auditor√≠a
            document = self.document_service.get_document(document_id)
            if document:
                logger.warning(f"Admin {admin_user_id} eliminando documento {document_id} "
                             f"de usuario {document.uploaded_by}")
            
            # Usar el m√©todo de eliminaci√≥n est√°ndar con override de admin
            return self.document_service.delete_document(
                document_id=document_id,
                user_id=admin_user_id  # Admin puede eliminar cualquier documento
            )
        except Exception as e:
            logger.error(f"Error eliminando documento como admin: {e}")
            raise DatabaseException(f"Error al eliminar documento: {str(e)}")
    
    # ==================== M√âTODOS PRIVADOS ====================
    
    def _get_activity_stats(
        self,
        hours: Optional[int] = None,
        days: Optional[int] = None
    ) -> Dict[str, int]:
        """Obtiene estad√≠sticas de actividad reciente"""
        if hours:
            since = datetime.utcnow() - timedelta(hours=hours)
        elif days:
            since = datetime.utcnow() - timedelta(days=days)
        else:
            since = None
        
        stats = {
            "new_users": self.user_service.count_users_since(since) if since else 0,
            "new_documents": self.document_service.count_documents_since(since) if since else 0,
            "active_chats": self.chat_service.count_active_chats_since(since) if since else 0
        }
        
        return stats
    
    def _get_system_health(self) -> Dict[str, Any]:
        """Obtiene m√©tricas de salud del sistema"""
        return {
            "status": "healthy",
            "database": "connected",
            "vector_store": "connected",
            "last_check": datetime.utcnow()
        }
    
    def _get_document_statistics(
        self,
        time_period: str,
        group_by: Optional[str]
    ) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de documentos"""
        stats = {
            "total": self.document_service.count_all_documents(),
            "by_type": self.document_service.get_documents_count_by_type(),
            "by_user": self.document_service.get_documents_count_by_user(),
            "average_size": self.document_service.get_average_document_size()
        }
        
        if group_by == "date":
            stats["by_date"] = self.document_service.get_documents_by_date(time_period)
        
        return stats
    
    def _get_chat_statistics(
        self,
        time_period: str,
        group_by: Optional[str]
    ) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de chats"""
        stats = {
            "total": self.chat_service.count_all_chats(),
            "active": self.chat_service.count_active_chats(),
            "by_user": self.chat_service.get_chats_count_by_user(),
            "average_messages": self.chat_service.get_average_messages_per_chat()
        }
        
        if group_by == "date":
            stats["by_date"] = self.chat_service.get_chats_by_date(time_period)
        
        return stats
    
    def _get_user_statistics(
        self,
        time_period: str,
        group_by: Optional[str]
    ) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de usuarios"""
        stats = {
            "total": self.user_service.count_all_users(),
            "active": self.user_service.count_active_users(),
            "by_role": self.user_service.get_users_by_role(),
            "registration_trend": self.user_service.get_registration_trend(time_period)
        }
        
        if group_by == "activity":
            stats["by_activity"] = self.user_service.get_users_by_activity_level()
        
        return stats
