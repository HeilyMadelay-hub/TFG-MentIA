#!/usr/bin/env python3
"""
Script de correcci√≥n autom√°tica para el problema de tiempo relativo.
Este script aplica las correcciones necesarias al c√≥digo del frontend.
"""

import os
import shutil
from pathlib import Path
import re

def backup_file(file_path):
    """Crear una copia de respaldo del archivo."""
    backup_path = f"{file_path}.backup"
    shutil.copy2(file_path, backup_path)
    print(f"üìÅ Backup creado: {backup_path}")
    return backup_path

def apply_frontend_fix():
    """Aplica la correcci√≥n al archivo del frontend."""
    frontend_file = Path("C:/Users/heily/Desktop/chabot/front/frontend_flutter/lib/screens/admin_panel_screen.dart")
    
    if not frontend_file.exists():
        print(f"‚ùå Archivo no encontrado: {frontend_file}")
        return False
    
    print(f"üîß Aplicando correcci√≥n a: {frontend_file}")
    
    # Crear backup
    backup_file(str(frontend_file))
    
    # Leer el archivo
    with open(frontend_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar y reemplazar la l√≠nea problem√°tica
    old_pattern = r"'Cuenta creada: \$\{_formatDateTime\(user\.createdAt\)\}'"
    
    if re.search(old_pattern, content):
        print("‚úÖ Patr√≥n problem√°tico encontrado, aplicando correcci√≥n...")
        
        # Insertar el c√≥digo de correcci√≥n antes del return ListTile
        fix_code = '''
                // üîß CORRECCI√ìN: Usar el tiempo formateado del backend
                String formattedTime = 'Fecha desconocida';
                
                // Buscar los datos del usuario en el dashboard data del backend
                if (_dashboardData != null && 
                    _dashboardData!['users'] != null && 
                    index < _dashboardData!['users'].length) {
                  final userData = _dashboardData!['users'][index];
                  
                  // ‚úÖ USAR EL TIEMPO YA FORMATEADO DEL BACKEND
                  if (userData['formatted_created'] != null && userData['formatted_created'].toString().isNotEmpty) {
                    formattedTime = userData['formatted_created'];
                    print('‚úÖ Usando tiempo del backend para ${user.username}: $formattedTime');
                  } else {
                    // Fallback: calcular en el frontend solo si no viene del backend
                    formattedTime = _formatDateTime(user.createdAt);
                    print('‚ö†Ô∏è Calculando tiempo en frontend para ${user.username}: $formattedTime');
                  }
                } else {
                  // Fallback: calcular en el frontend
                  formattedTime = _formatDateTime(user.createdAt);
                  print('‚ùå Sin datos del backend, calculando en frontend para ${user.username}: $formattedTime');
                }
                '''
        
        # Buscar el itemBuilder y agregar el c√≥digo de correcci√≥n
        itembuilder_pattern = r"(itemBuilder: \(context, index\) \{\s+final user = _users\[index\];)"
        replacement = r"\1" + fix_code
        
        content = re.sub(itembuilder_pattern, replacement, content, flags=re.MULTILINE)
        
        # Reemplazar la l√≠nea problem√°tica
        content = re.sub(old_pattern, "'Cuenta creada: $formattedTime'", content)
        
        # Escribir el archivo corregido
        with open(frontend_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Correcci√≥n aplicada exitosamente")
        return True
    else:
        print("‚ö†Ô∏è Patr√≥n problem√°tico no encontrado, es posible que ya est√© corregido")
        return False

def verify_backend_config():
    """Verifica que el backend est√© enviando los datos correctos."""
    backend_file = Path("C:/Users/heily/Desktop/chabot/back/src/api/endpoints/admin_panel/dashboard.py")
    
    if not backend_file.exists():
        print(f"‚ùå Archivo backend no encontrado: {backend_file}")
        return False
    
    with open(backend_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar que el backend incluya formatted_created
    if '"formatted_created": formatted_time' in content:
        print("‚úÖ Backend configurado correctamente - enviando formatted_created")
        return True
    elif 'formatted_created' in content:
        print("‚ö†Ô∏è Backend parcialmente configurado - revisar implementaci√≥n")
        return True
    else:
        print("‚ùå Backend no est√° enviando formatted_created")
        return False

def test_fix():
    """Proporciona instrucciones para probar la correcci√≥n."""
    print("\nüß™ INSTRUCCIONES PARA PROBAR LA CORRECCI√ìN:")
    print("=" * 50)
    print("1. Abrir terminal en la carpeta del frontend:")
    print("   cd C:/Users/heily/Desktop/chabot/front/frontend_flutter")
    print()
    print("2. Ejecutar Flutter:")
    print("   flutter clean")
    print("   flutter pub get") 
    print("   flutter run -d chrome --web-port=53793")
    print()
    print("3. Ir al panel de administraci√≥n y verificar:")
    print("   - Los tiempos mostrados deben coincidir con los logs del backend")
    print("   - marcos: deber√≠a mostrar 'Hace 2-3 d√≠as'")
    print("   - testuser832410: deber√≠a mostrar 'Hace 1-2 d√≠as'")
    print("   - heily185: deber√≠a mostrar 'Hace 3-4 d√≠as'")
    print()
    print("4. Verificar logs en la consola del navegador:")
    print("   - Deber√≠as ver mensajes como '‚úÖ Usando tiempo del backend para...'")

def main():
    """Funci√≥n principal del script de correcci√≥n."""
    print("üöÄ SCRIPT DE CORRECCI√ìN AUTOM√ÅTICA")
    print("Corrigiendo el problema de tiempo relativo en el panel de administraci√≥n")
    print("=" * 70)
    
    # Verificar backend
    print("\n1. Verificando configuraci√≥n del backend...")
    backend_ok = verify_backend_config()
    
    # Aplicar correcci√≥n al frontend
    print("\n2. Aplicando correcci√≥n al frontend...")
    frontend_ok = apply_frontend_fix()
    
    # Resumen
    print("\n" + "=" * 70)
    print("üìã RESUMEN DE LA CORRECCI√ìN:")
    print(f"   Backend: {'‚úÖ OK' if backend_ok else '‚ùå Necesita revisi√≥n'}")
    print(f"   Frontend: {'‚úÖ Corregido' if frontend_ok else '‚ö†Ô∏è Sin cambios'}")
    
    if frontend_ok:
        test_fix()
    
    print("\nüéâ Proceso completado. Reinicia la aplicaci√≥n Flutter para ver los cambios.")

if __name__ == "__main__":
    main()
